package torreparqueadero;

//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : TorreParqueadero
//  @ File Name : Parqueaderos.java
//  @ Date : 04/2013
//  @ Author : Luis M Ponce de leon
//
//




/** Clase encargada de administrar los parqueaderos de la torre y el sotano.
 * 
 * @author luismiguel
 */
public class Parqueaderos {
    /** 
     * Matriz de las entradas. Posee 26 filas (A-Z) y 10 columnas (0-9).
     */
    private EntradaParqueadero[][] torre = new EntradaParqueadero[26][10];

    /** 
     * Arreglo que contiene los vehiculos almacenados en el sotano. Puede
     * almacenar hasta 100 vehiculos.
     */
    private Vehiculo[] sotano = new Vehiculo[100];

    /** 
     * Numero de celdas ocupadas en el sotano, para un mejor control de este.
     */
    private int celdasOcupadasSotano=0;

    /** 
     * Matriz de enteros con el numero de celdas ocupadas en cada entrada.
     */
    private int[][] matrizDeDisponibilidad = new int[26][10];

    /** Metodo para ingresar, si es posible, un vehiculo. Retorna true si fue
     * ingresado y false si no lo fue. El vehiculo es ingresado en su respectiva
     * celda si hay espacio, de lo contrario es ingresado al sotano si se puede.
     * 
     * @param vIn El vehiculo que se quiere ingresar.
     * @return True si el ingreso fue exitoso, false si no fue ingresado.
     */
    public boolean IngresarVehiculo(Vehiculo vIn) {        
        String placa= vIn.GetPlaca();
        int fila = 23 - (placa.toUpperCase().charAt(0) - 'A');
        int columna = placa.charAt(placa.length()-1) - 48;
        if (matrizDeDisponibilidad[fila][columna] < 24){
            torre[fila][columna].AgregarVehiculo(vIn);
            matrizDeDisponibilidad[fila][columna]++;
            return true;
        } else {
            if (celdasOcupadasSotano<100){
                for (int i=0; i<100; i++){
                    if (sotano[i]==null){
                        sotano[i]=vIn;
                        celdasOcupadasSotano++;
                        return true;
                    }
                }
            } else {
                return false;
            }
        }
        return false;
        
    }

    /** Metodo para retirar un vehiculo apartir de su placa. Busca el vehiculo 
     * en su entrada determinada (deacuerdo a la placa). Si no se encuentra en 
     * la entrada se busca en el sotano.
     * 
     * @param placa Placa de vehiculo que se busca retirar.
     */
    public void RetirarVehiculo(String placa) {
        int fila = 23 - (placa.toUpperCase().charAt(0) - 'A');
        int columna = placa.charAt(placa.length()-1) - 48;
        if (torre[fila][columna].RetirarVehiculo(placa)){
            matrizDeDisponibilidad[fila][columna]--;
        } else {
            for (int i=0; i<celdasOcupadasSotano; i++){
                if (sotano[i].GetPlaca().equals(placa)){
                    sotano[i]=null;
                    celdasOcupadasSotano--;
                }
            }
            //se espera nunca llegar a esta linea...
            System.out.println("No se encontro ningun vehiculo de placas: " + placa);
        }
    }

    /** Geter de las celdas ocupadas del sotano
     * 
     * @return El numero de celdas ocupadas en el sotano.
     */
    public int GetCeldasSotano() {
        return celdasOcupadasSotano;
    }

    /** Metodo llamado para sacar todos los vehiculos almacenados en el 
     * parqueadero. Este llama el metodo Limpieza de celdas en cada entrada
     * y retira todos los vehiculos en el sotano, generando los cobros
     * acumulados a los clientes.
     */
    public void LimpiezaParqueadero() {
        for (int i=0; i<26; i++){
            for (int j=0; j<10; j++){
                torre[i][j].LimpiezaCeldas();
                matrizDeDisponibilidad[i][j]=0;
            }
        }
        
        for (int i=0; i<celdasOcupadasSotano; i++){
            LogEventos.getInstance().BuscarReciboPorPlaca(sotano[i].GetPlaca()).GenerarDeudaAcumulada();
            sotano[i]=null;
        }
        celdasOcupadasSotano=0;
    }
}
